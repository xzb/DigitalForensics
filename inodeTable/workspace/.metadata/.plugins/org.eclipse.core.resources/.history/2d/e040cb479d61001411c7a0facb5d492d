/*==================================================================
 *   FileName: inode.c
 *     Author: Zebin Xie
 *      Email: zebin.xie@gmail.com
 *     Readme: This version only read and print the first inode table.
 *     			Still have some doubts about the location method.
 *     			Please contact me if I write something wrong.
 * LastChange: 2014-11-01 morning
 *==================================================================*/

#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>
#include "linux/ext3_fs.h"

#define BOOT_SECTOR_OFFSET 1024


int main( int argc, char** argv )
{

	int fd;

    if ( argc == 1)
    {
        printf("Enter disk name as command line argument. e.g - sudo ./inode /dev/sda1\n");
        return -1;
    }
	char* dev = argv[1];					//"/dev/sda1";

	if((fd=open( dev , O_RDONLY))==-1) {
		printf("Can't open.\n");
		return -1;
	}


	/*****************************************
	 * reading the superblock.
	 * we need to find the s_log_block_size
	 * ***************************************/
	struct ext3_super_block sb;			//not * here

    if ( ( lseek( fd, BOOT_SECTOR_OFFSET, SEEK_SET ) ) == -1 )
    {
        printf( "lseek error\n" );
        return -1;
    }
    if ( ( read( fd, &sb, sizeof (struct ext3_super_block ) ) ) == -1 )
    {
        printf( "read error\n" );
        return -1;
    }
    int blockSize= 1024<<sb.s_log_block_size;
	printf( "s_log_block_size = %uByte\n", blockSize );		//4KB

	//int inodeSize= sb.s_inode_size;						//256
	//int i_bnum_g= sb.s_inodes_per_group/(blockSize/inodeSize); //512 blocks



	/*****************************************
	 * reading the groupDescriptor.
	 * we need to find the bg_inode_table
	 * ***************************************/
	struct ext3_group_desc gd;			//not * here

    if ( ( lseek( fd, blockSize, SEEK_SET ) ) == -1 )		//no+1024?
    {
        printf( "lseek error\n" );
        return -1;
    }
    if ( ( read( fd, &gd, sizeof (struct ext3_group_desc ) ) ) == -1 )
    {
        printf( "read error\n" );
        return -1;
    }
    printf("bg_inode_bitmap = %u\n", gd.bg_inode_bitmap);
    printf("bg_inode_table = %u\n", gd.bg_inode_table);		 //why not+1?



	/*****************************************
	 * reading the inode table.
	 * ***************************************/
	struct ext3_inode inode;			//not * here

    if ( ( lseek( fd, blockSize*(gd.bg_inode_table), SEEK_SET ) ) == -1 )	//not quite sure here?
    {
        printf( "lseek error\n" );
        return -1;
    }
    if ( ( read( fd, &inode, sizeof (struct ext3_inode ) ) ) == -1 )
    {
        printf( "read error\n" );
        return -1;
    }

    printf("i_mode = %hu\n", inode.i_mode);
    printf("i_uid = %hu\n", inode.i_uid);
    printf("i_size = %u\n",inode.i_size);
    printf("i_atime = %u\n",inode.i_atime);
    printf("i_ctime = %u\n",inode.i_ctime);
    printf("i_mtime = %u\n",inode.i_mtime);
    printf("i_dtime = %u\n",inode.i_dtime);
    printf("i_gid = %hu\n",inode.i_gid);
    printf("i_links_count = %hu\n",inode.i_links_count);
    printf("i_blocks = %u\n",inode.i_blocks);
    printf("i_flags = %u\n",inode.i_flags);

    printf("i_generation = %u\n",inode.i_generation);
    printf("i_file_acl = %u\n",inode.i_file_acl);
    printf("i_dir_acl = %u\n",inode.i_dir_acl);
    printf("i_faddr = %u\n",inode.i_faddr);
    printf("i_extra_isize = %hu\n",inode.i_extra_isize);
    printf("i_pad1 = %hu\n",inode.i_pad1);


    printf( "read complete.\n" );

	close( fd );
	return 0;



}
